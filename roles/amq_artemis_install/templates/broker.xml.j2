<?xml version='1.0'?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<configuration xmlns="urn:activemq"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xmlns:xi="http://www.w3.org/2001/XInclude"
               xsi:schemaLocation="urn:activemq /schema/artemis-configuration.xsd">

   <core xmlns="urn:activemq:core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="urn:activemq:core ">

      <name>{{ broker_name }}</name>


      <persistence-enabled>true</persistence-enabled>

      <!-- this could be ASYNCIO, MAPPED, NIO
           ASYNCIO: Linux Libaio
           MAPPED: mmap files
           NIO: Plain Java Files
       -->
      <journal-type>ASYNCIO</journal-type>

      <paging-directory>{{ broker_persistance_folder }}/paging</paging-directory>

      <bindings-directory>{{ broker_persistance_folder }}/bindings</bindings-directory>

      <journal-directory>{{ broker_persistance_folder }}/journal</journal-directory>

      <large-messages-directory>{{ broker_persistance_folder }}/large-messages</large-messages-directory>

      <journal-datasync>true</journal-datasync>

      <journal-min-files>2</journal-min-files>

      <journal-pool-files>10</journal-pool-files>

      <journal-device-block-size>4096</journal-device-block-size>

      <journal-file-size>10M</journal-file-size>

      <!--
       This value was determined through a calculation.
       Your system could perform 15.62 writes per millisecond
       on the current journal configuration.
       That translates as a sync write every 64000 nanoseconds.

       Note: If you specify 0 the system will perform writes directly to the disk.
             We recommend this to be 0 if you are using journalType=MAPPED and journal-datasync=false.
      -->
      <journal-buffer-timeout>64000</journal-buffer-timeout>


      <!--
        When using ASYNCIO, this will determine the writing queue depth for libaio.
       -->
      <journal-max-io>4096</journal-max-io>

      <!-- how often we are looking for how many bytes are being used on the disk in ms -->
      <disk-scan-period>5000</disk-scan-period>

      <!-- once the disk hits this limit the system will block, or close the connection in certain protocols
           that won't support flow control. -->
      <max-disk-usage>90</max-disk-usage>

      <!-- should the broker detect dead locks and other issues -->
      <critical-analyzer>true</critical-analyzer>

      <critical-analyzer-timeout>120000</critical-analyzer-timeout>

      <critical-analyzer-check-period>60000</critical-analyzer-check-period>

      <critical-analyzer-policy>HALT</critical-analyzer-policy>


      <page-sync-timeout>3492000</page-sync-timeout>

       <!-- Connectors -->

       <connectors>
         <connector name="netty-connector">tcp://{{ ansible_host }}:61616</connector>
       </connectors>       

       <!-- Acceptors -->
       <acceptors>
         <acceptor name="netty-acceptor">tcp://{{ ansible_host }}:61616</acceptor>
       </acceptors>

{% if cluster%}

          <!-- Clustering configuration -->
       <broadcast-groups>
         <broadcast-group name="Artemis-broadcast-group">
           <local-bind-address>{{ ansible_host }}</local-bind-address>
           <local-bind-port>5433</local-bind-port>   
           <group-address>231.7.7.7</group-address>
           <group-port>9876</group-port>
           <broadcast-period>100</broadcast-period>
           <connector-ref>netty-connector</connector-ref>
         </broadcast-group>
       </broadcast-groups>

       <discovery-groups>
         <discovery-group name="Artemis-discovery-group">
           <local-bind-address>{{ ansible_host }}</local-bind-address>
           <group-address>231.7.7.7</group-address>
           <group-port>9876</group-port>
           <refresh-timeout>10000</refresh-timeout>
         </discovery-group>
       </discovery-groups>

<!-- This is a symmetric cluster -->

       <cluster-connections>
         <cluster-connection name="Artemis-Cluster">
           <address></address>
           <connector-ref>netty-connector</connector-ref>
           <check-period>1000</check-period>
           <connection-ttl>5000</connection-ttl>
           <min-large-message-size>50000</min-large-message-size>
           <call-timeout>5000</call-timeout>
           <retry-interval>500</retry-interval>
           <retry-interval-multiplier>1.0</retry-interval-multiplier>
           <max-retry-interval>5000</max-retry-interval>
           <initial-connect-attempts>-1</initial-connect-attempts>
           <reconnect-attempts>-1</reconnect-attempts>
           <use-duplicate-detection>true</use-duplicate-detection>
           <message-load-balancing>ON_DEMAND</message-load-balancing>
           <max-hops>1</max-hops>
           <confirmation-window-size>32000</confirmation-window-size>
           <call-failover-timeout>30000</call-failover-timeout>
           <notification-interval>1000</notification-interval>
           <notification-attempts>2</notification-attempts>
           <discovery-group-ref discovery-group-name="Artemis-discovery-group"/>
         </cluster-connection>
       </cluster-connections>

       <cluster-user>{{ cluster_user }}</cluster-user>
       <cluster-password>{{ cluster_password }}</cluster-password>

{% endif %}

       <security-settings>
         <security-setting match="#">
            <permission type="createNonDurableQueue" roles="amq"/>
            <permission type="deleteNonDurableQueue" roles="amq"/>
            <permission type="createDurableQueue" roles="amq"/>
            <permission type="deleteDurableQueue" roles="amq"/>
            <permission type="createAddress" roles="amq"/>
            <permission type="deleteAddress" roles="amq"/>
            <permission type="consume" roles="amq"/>
            <permission type="browse" roles="amq"/>
            <permission type="send" roles="amq"/>
            <!-- we need this otherwise ./artemis data imp wouldn't work -->
            <permission type="manage" roles="amq"/>
         </security-setting>
      </security-settings>

      <address-settings>
         <!-- if you define auto-create on certain queues, management has to be auto-create -->
         <address-setting match="activemq.management#">
            <dead-letter-address>DLQ</dead-letter-address>
            <expiry-address>ExpiryQueue</expiry-address>
            <redelivery-delay>0</redelivery-delay>
            <!-- with -1 only the global-max-size is in use for limiting -->
            <max-size-bytes>-1</max-size-bytes>
            <message-counter-history-day-limit>10</message-counter-history-day-limit>
            <address-full-policy>PAGE</address-full-policy>
            <auto-create-queues>true</auto-create-queues>
            <auto-create-addresses>true</auto-create-addresses>
            <auto-create-jms-queues>true</auto-create-jms-queues>
            <auto-create-jms-topics>true</auto-create-jms-topics>
         </address-setting>
         <!--default for catch all-->
         <address-setting match="#">
            <dead-letter-address>DLQ</dead-letter-address>
            <expiry-address>ExpiryQueue</expiry-address>
            <redelivery-delay>0</redelivery-delay>
            <!-- with -1 only the global-max-size is in use for limiting -->
            <max-size-bytes>-1</max-size-bytes>
            <message-counter-history-day-limit>10</message-counter-history-day-limit>
            <address-full-policy>PAGE</address-full-policy>
            <auto-create-queues>true</auto-create-queues>
            <auto-create-addresses>true</auto-create-addresses>
            <auto-create-jms-queues>true</auto-create-jms-queues>
            <auto-create-jms-topics>true</auto-create-jms-topics>
         </address-setting>
      </address-settings>

      <addresses>
         <address name="DLQ">
            <anycast>
               <queue name="DLQ" />
            </anycast>
         </address>
         <address name="ExpiryQueue">
            <anycast>
               <queue name="ExpiryQueue" />
            </anycast>
         </address>

      </addresses>

{% if jdbc_persistance %}
<store>

         <database-store>
            <data-source-properties>
              <data-source-property key="driverClassName" value="org.postgresql.Driver" />
              <data-source-property key="url" value="{{ jdbc_connection_url }}" />
              <data-source-property key="username" value="{{ jdbc_user }}" />
              <data-source-property key="password" value="{{ jdbc_password }}" />
              <data-source-property key="poolPreparedStatements" value="false" />
            </data-source-properties>
            <bindings-table-name>{{ bindings_table_name }}</bindings-table-name>
            <message-table-name>{{ message_table_name }}</message-table-name>
            <large-message-table-name>{{ large_message_table_name }}</large-message-table-name>
            <page-store-table-name>{{ page_table_name }}</page-store-table-name>
            <jdbc-driver-class-name></jdbc-driver-class-name>
         </database-store>

</store>
{% endif %}


      <!-- Uncomment the following if you want to use the Standard LoggingActiveMQServerPlugin pluging to log in events
      <broker-plugins>
         <broker-plugin class-name="org.apache.activemq.artemis.core.server.plugin.impl.LoggingActiveMQServerPlugin">
            <property key="LOG_ALL_EVENTS" value="true"/>
            <property key="LOG_CONNECTION_EVENTS" value="true"/>
            <property key="LOG_SESSION_EVENTS" value="true"/>
            <property key="LOG_CONSUMER_EVENTS" value="true"/>
            <property key="LOG_DELIVERING_EVENTS" value="true"/>
            <property key="LOG_SENDING_EVENTS" value="true"/>
            <property key="LOG_INTERNAL_EVENTS" value="true"/>
         </broker-plugin>
      </broker-plugins>
      -->

{% if cluster and ha %}
      <ha-policy>
       <{{ ha_type }}>
          <{{ ha_role }}/>
       </{{ ha_type }}>
      </ha-policy>
{% endif %}


   </core>
</configuration>
